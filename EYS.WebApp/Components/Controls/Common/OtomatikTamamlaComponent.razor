<div class="form-group">
    <label for="search">@Label</label>
    <input
        type="text"
        class="form-control"
        @bind-value="userInput"
        @bind-value:event="oninput"
        @onkeyup="OnKeyup"/>

</div>

@if (aramaSonuclari != null && aramaSonuclari.Count > 0)
{
    <div class="arama-sonuc">
        <ul>
            @{
                int itemIndex = 0;
                foreach (var urn in aramaSonuclari)
                {
                    <li
                        @key="urn.Id"
                        class="@(itemIndex == suankiItemIndex ? "selected" : "")"
                        @onclick="() => ItemSecmeYap(urn)">
                        @urn.Name
                    </li>
                    itemIndex++;
                }
            }
        </ul>
    </div>
}

@code {
    [Parameter]
    public string Label { get; set; } = string.Empty;

    private List<ItemViewModel>? aramaSonuclari = null;

    [Parameter]
    public Func<string, Task<List<ItemViewModel>>>? AramaFonksiyon { get; set; }

    [Parameter]
    public EventCallback<ItemViewModel> ItemSecildiginde { get; set; }

    private ItemViewModel? seciliItem = null;

    private string _userInput = string.Empty;
    public string userInput
    {
        get => _userInput;
        set
        {
            _userInput = value;

            if (!string.IsNullOrWhiteSpace(_userInput) && AramaFonksiyon != null)
            {
                NesneleriGosterAsync();
            }
        }
    }

    private ItemViewModel? suankiItem = null;
    private int suankiItemIndex = -1;

    private async Task NesneleriGosterAsync()
    {
        if(AramaFonksiyon != null)
        {
            aramaSonuclari = await AramaFonksiyon(_userInput);
        }

        StateHasChanged();
    }

    private void ItemSecmeYap(ItemViewModel urn)
    {
        SecmeSil();

        if (urn != null)
        {
            this.seciliItem = urn;
            this.userInput = urn?.Name ?? string.Empty;
            this.aramaSonuclari = null;

            ItemSecildiginde.InvokeAsync(urn);
        }
    }

    private void SecmeSil()
    {
        suankiItemIndex = -1;
        suankiItem = null;
        aramaSonuclari = null;
    }

    private void OnKeyup(KeyboardEventArgs e)
    {
        if (aramaSonuclari is not null && aramaSonuclari.Count > 0 && (e.Code == "ArrowDown" || e.Code == "ArrowUp"))
        {
            if (e.Code == "ArrowDown" && suankiItemIndex < aramaSonuclari.Count - 1)
            {
                suankiItem = aramaSonuclari[++suankiItemIndex];
            }
            else if (e.Code == "ArrowUp")
            {
                if (suankiItemIndex > 0)
                {
                    suankiItem = aramaSonuclari[--suankiItemIndex];
                }
                else
                {
                    suankiItem = null;
                    suankiItemIndex = -1;
                }
            }
        }
        
        else if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            ItemSecmeYap(suankiItem);
        }
    }

    public class ItemViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }
}