@page "/envanterduzenle/{EnvId:int}"

@attribute [Authorize]

@inject NavigationManager NavigationManager
@inject IIDyeGoreEnvanterGoruntuleUseCase IDyeGoreEnvanterGoruntuleUseCase
@inject IEnvanterDuzenleUseCase EnvanterDuzenleUseCase

<h3>Envanter Düzenle</h3>
<br />
@if (this.envanter is not null)
{
    <EditForm Model="envanter" FormName="formEnvanter" OnValidSubmit="Guncelle">
        <DataAnnotationsValidator></DataAnnotationsValidator>

        <InputNumber @bind-Value="envanter.EnvanterId" hidden></InputNumber>

        <div class="form-group">
            <label for="name">Envanter İsimi</label>
            <InputText id="isim"
                       @bind-Value="envanter.EnvanterIsim"
                       class="form-control">
            </InputText>
            <ValidationMessage For="() => envanter.EnvanterIsim"></ValidationMessage>
        </div>

        <div class="form-group">
            <label for="adet">Envanter Adeti</label>
            <InputNumber id="adet"
                         @bind-Value="envanter.Adet"
                         class="form-control">
            </InputNumber>
            <ValidationMessage For="() => envanter.Adet"></ValidationMessage>
        </div>

        <div class="form-group">
            <label for="fiyat">Envanter Fiyatı</label>
            <InputNumber id="fiyat"
                         @bind-Value="envanter.Fiyat"
                         class="form-control">
            </InputNumber>
            <ValidationMessage For="() => envanter.Fiyat"></ValidationMessage>
        </div>

        <br />

        <button type="submit" class="btn btn-primary">Güncelle</button>
        &nbsp;
        <a href="/envanterler" class="btn btn-secondary">Geri Dön</a>

    </EditForm>
}

@code {
    [Parameter]
    public int EnvId { get; set; }

    [SupplyParameterFromForm]
    private EnvanterViewModel? envanter { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if(this.envanter is null)
        {
            var env = await IDyeGoreEnvanterGoruntuleUseCase.ExecuteAsync(this.EnvId);
            envanter = new EnvanterViewModel             {
                EnvanterId = env.EnvanterId,
                EnvanterIsim = env.EnvanterIsim,
                Adet = env.Adet,
                Fiyat = env.Fiyat
            };
        }
    }

    private async Task Guncelle()
    {
        if (envanter is not null)
        {
            var env = new Envanter
            {
                EnvanterId = envanter.EnvanterId,
                EnvanterIsim = envanter.EnvanterIsim,
                Adet = envanter.Adet,
                Fiyat = envanter.Fiyat
            };

            await EnvanterDuzenleUseCase.ExecuteAsync(env);
            NavigationManager.NavigateTo("/envanterler");
        }
    }
}
