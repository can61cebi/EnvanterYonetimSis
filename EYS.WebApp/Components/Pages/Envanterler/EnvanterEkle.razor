@page "/envanterekle"

@attribute [Authorize]

@inject IEnvanterEkleUseCase EnvanterEkleUseCase;
@inject NavigationManager NavigationManager

<h3>Envanter Ekle</h3>

<br />

<EditForm Model="envanter" FormName="formEnvanter" OnValidSubmit="Kaydet">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="form-group">
        <label for="name">Envanter İsimi</label>
        <InputText id="isim"
            @bind-Value="envanter.EnvanterIsim"
            class="form-control">
        </InputText>
        <ValidationMessage For="() => envanter.EnvanterIsim"></ValidationMessage>
    </div>

    <div class="form-group">
        <label for="adet">Envanter Adeti</label>
        <InputNumber id="adet"
                   @bind-Value="envanter.Adet"
                   class="form-control">
        </InputNumber>
        <ValidationMessage For="() => envanter.Adet"></ValidationMessage>
    </div>

    <div class="form-group">
        <label for="fiyat">Envanter Fiyatı</label>
        <InputNumber id="fiyat"
                     @bind-Value="envanter.Fiyat"
                     class="form-control">
        </InputNumber>
        <ValidationMessage For="() => envanter.Fiyat"></ValidationMessage>
    </div>

    <br />

    <button type="submit" class="btn btn-primary">Kaydet</button>
    &nbsp;
    <a href="/envanterler" class="btn btn-secondary">Geri Dön</a>

</EditForm>

@code {

    [SupplyParameterFromForm]
    private EnvanterViewModel envanter { get; set; } = new EnvanterViewModel();

    private async Task Kaydet()
    {
        var env = new Envanter
            {
                EnvanterId = envanter.EnvanterId,
                EnvanterIsim = envanter.EnvanterIsim,
                Fiyat = envanter.Fiyat,
                Adet = envanter.Adet
            };
        await EnvanterEkleUseCase.ExecuteAsync(env);

        NavigationManager.NavigateTo("/envanterler");
    }

}
